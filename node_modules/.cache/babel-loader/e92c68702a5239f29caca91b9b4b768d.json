{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport cartItems from \"../../cartItems\";\nconst initialState = {\n  cartItems: cartItems,\n  amount: 4,\n  total: 0,\n  isLoading: true\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    clearCart: state => {\n      state.cartItems = []; // return {cartItems: []} it is going to update the initialState, removing what's not passed inside of the return.\n    },\n    removeItems: (state, action) => {\n      console.log(action);\n    }\n  }\n}); // console.log(cartSlice)\n\nexport const {\n  clearCart,\n  removeItems\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/oliverfavalli/Desktop/development-study/react-redux/starter/src/features/cart/cartSlice.js"],"names":["createSlice","cartItems","initialState","amount","total","isLoading","cartSlice","name","reducers","clearCart","state","removeItems","action","console","log","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBD,EAAAA,SAAS,EAAEA,SADM;AAEjBE,EAAAA,MAAM,EAAE,CAFS;AAGjBC,EAAAA,KAAK,EAAE,CAHU;AAIjBC,EAAAA,SAAS,EAAE;AAJM,CAArB;AAOA,MAAMC,SAAS,GAAGN,WAAW,CAAC;AAC1BO,EAAAA,IAAI,EAAE,MADoB;AAE1BL,EAAAA,YAF0B;AAG1BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AAClBA,MAAAA,KAAK,CAACT,SAAN,GAAkB,EAAlB,CADkB,CAElB;AACH,KAJK;AAKNU,IAAAA,WAAW,EAAE,CAACD,KAAD,EAAOE,MAAP,KAAkB;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH;AAPK;AAHgB,CAAD,CAA7B,C,CAcA;;AAEA,OAAO,MAAM;AAAEH,EAAAA,SAAF;AAAaE,EAAAA;AAAb,IAA6BL,SAAS,CAACS,OAA7C;AAEP,eAAeT,SAAS,CAACU,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport cartItems from \"../../cartItems\"\n\nconst initialState = {\n    cartItems: cartItems,\n    amount: 4,\n    total: 0,\n    isLoading: true,\n}\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducers: {\n        clearCart: (state) => {\n            state.cartItems = []\n            // return {cartItems: []} it is going to update the initialState, removing what's not passed inside of the return.\n        }, \n        removeItems: (state,action) => {\n            console.log(action)\n        }\n    }\n})\n\n// console.log(cartSlice)\n\nexport const { clearCart, removeItems } = cartSlice.actions\n\nexport default cartSlice.reducer"]},"metadata":{},"sourceType":"module"}