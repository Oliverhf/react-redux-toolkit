{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  cartItems: [],\n  amount: 4,\n  total: 0,\n  isLoading: true\n};\nexport const getCartItems = createAsyncThunk('cart/getCartItems', async thunkAPI => {\n  try {\n    console.log(thunkAPI.getState());\n    const resp = await axios(url); // console.log(resp)\n\n    return resp.data;\n  } catch (err) {}\n});\nconst url = 'https://course-api.com/react-useReducer-cart-project';\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    clearCart: state => {\n      state.cartItems = []; // return {cartItems: []} it is going to update the initialState, removing what's not passed inside of the return.\n    },\n    removeItem: (state, action) => {\n      var _state$cartItems;\n\n      const itemId = action === null || action === void 0 ? void 0 : action.payload;\n      state.cartItems = state === null || state === void 0 ? void 0 : (_state$cartItems = state.cartItems) === null || _state$cartItems === void 0 ? void 0 : _state$cartItems.filter(item => item.id !== itemId);\n    },\n    increase: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      const cartItem = state.cartItems.find(item => item.id === payload.id);\n      cartItem.amount = cartItem.amount + 1;\n    },\n    decrease: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      const cartItem = state.cartItems.find(item => item.id === payload.id);\n      cartItem.amount = cartItem.amount - 1;\n    },\n    calculateTotals: state => {\n      let amount = 0;\n      let total = 0;\n      state.cartItems.forEach(item => {\n        amount += item.amount;\n        total += item.amount * item.price;\n      });\n      state.amount = amount;\n      state.total = total;\n    }\n  },\n  extraReducers: {\n    [getCartItems.pending]: state => {\n      state.isLoading = true;\n    },\n    [getCartItems.fulfilled]: (state, action) => {\n      // console.log(action)\n      state.isLoading = false;\n      state.cartItems = action.payload;\n    },\n    [getCartItems.rejected]: state => {\n      state.isLoading = false;\n    }\n  }\n});\nconsole.log(cartSlice);\nexport const {\n  clearCart,\n  removeItem,\n  increase,\n  decrease,\n  calculateTotals\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/oliverfavalli/Desktop/development-study/react-redux/starter/src/features/cart/cartSlice.js"],"names":["createSlice","createAsyncThunk","axios","initialState","cartItems","amount","total","isLoading","getCartItems","thunkAPI","console","log","getState","resp","url","data","err","cartSlice","name","reducers","clearCart","state","removeItem","action","itemId","payload","filter","item","id","increase","cartItem","find","decrease","calculateTotals","forEach","price","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport axios from \"axios\"\n\nconst initialState = {\n    cartItems: [],\n    amount: 4,\n    total: 0,\n    isLoading: true,\n}\n\nexport const getCartItems = createAsyncThunk('cart/getCartItems', async (thunkAPI) => {\n    try {\n        console.log(thunkAPI.getState())\n        const resp = await axios(url)\n        // console.log(resp)\n       \n        return resp.data\n    } catch(err) {\n\n    }\n})\n\nconst url = 'https://course-api.com/react-useReducer-cart-project'\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState,\n    reducers: {\n        clearCart: (state) => {\n            state.cartItems = []\n            // return {cartItems: []} it is going to update the initialState, removing what's not passed inside of the return.\n        }, \n        removeItem: (state, action) => {\n            const itemId = action?.payload\n            state.cartItems = state?.cartItems?.filter((item) => item.id !== itemId)\n        },\n        increase: (state, {payload}) => {\n            const cartItem = state.cartItems.find((item) => item.id === payload.id)\n            cartItem.amount = cartItem.amount + 1\n        },\n        decrease: (state, {payload}) => {\n            const cartItem = state.cartItems.find((item) => item.id === payload.id)\n            cartItem.amount = cartItem.amount - 1\n        },\n        calculateTotals: (state) => {\n            let amount = 0\n            let total = 0\n            state.cartItems.forEach((item) => {\n                amount += item.amount\n                total += item.amount * item.price\n            })\n            state.amount = amount\n            state.total = total\n        }\n    },\n    extraReducers: {\n        [getCartItems.pending]: (state) => {\n            state.isLoading = true\n        },\n        [getCartItems.fulfilled]: (state,action) => {\n            // console.log(action)\n            state.isLoading = false\n            state.cartItems = action.payload\n        }, \n        [getCartItems.rejected]: (state) => {\n            state.isLoading = false\n        }\n    }\n})\n\nconsole.log(cartSlice)\n\nexport const { clearCart, removeItem, increase, decrease, calculateTotals } = cartSlice.actions\n\nexport default cartSlice.reducer"]},"metadata":{},"sourceType":"module"}